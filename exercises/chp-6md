# 6장 연습문제

**01 CREATE TABLE 명령문에서 속성의 제약 조건 설정을 위한 것이 아닌 것은?**

1. CASCADE

**02 다음 중 CREATE TABLE 구문으로 명세할 수 없는 것은?**

4. 인덱스

**03 SOL 명령문 중 데이터 정의어 (DDL) 에 해당하는 것은?**

3. ALTER문

**04 SOL 명령문 중 데이터 제어어 (DCL) 에 해당하는 것은?**

1. REVOKE문

**05 사용자가 허가받은 권한을 다른 사용자에게도 부여할 수 있도록 허용하는 SOL문을 작성할 때 필요한명령어옵션은?**

4. WITH GRANT OPTION

**06 다음 SOL 관련 명령어 중 DCL과 가장 연관성이 낮은 것은?**

1. EXEC

**07 다음 GRANT 구문 중 옳지 않은 것은?**

4. GRANT FOREIGN KEY(소속학과명) ON 교수 TO 홍길동

**08 다음 보기의 GRAN丁와 REVOKE 문장의 실행 결과는?**

```sql
(ㄱ) GRANT SELECT ON 과목 TO 홍길동 WITH GRANT OPTION ; ('root' 실행)
(ㄴ) GRANT SELECT ON 과목 TO 김 연 아 ; (‘홍길동 실행)
(ㄷ) REVOKE SELECT ON 과목 FROM 홍길동 CASCADE ; ('root' 실행)
```

4. 홍길동, 김연아모두에게 권한이 없음

**09 부(view)에 대한 설명 중 옳지 않은 것은?**

3. 뷰는 가상 테이불이므로 데이터 변경은 불가능하다.

**10 뷰(view)에 대한 설명 중 옳지 않은 것은?**

4. 하나 이상의 기반 테이불로부터 유도되어 만들어지는 실제 테이불이다.

**11 뷰를 수정할 수 있는 경우는?**

1. 특정 기반 데이블의 부분 행을 갖는 단순 뷰인 경우

**12 인덱스에 관한 설명으로 옳지 않은 것은?**

4. 데이터가 늘어날수록 인덱스는 작아진다.

**13 다음 문장아 참이먼 0, 거짓이면 x 를 하시오.**

1. 'WITH GRANT OPTION을 함께 명세하면 부여받은 권한을 계정 사용자가 다른 사용자 계정에게도 부여할 수 있는 권한을 갖게 된다. (_o_)
2. DROP TABLE문은 행 삭제를 위한 명령문으로 모든 행 삭제까지는 가능하지만 테이불 자체를 제거할 수 없는 반면. DELETE FROM 명령문은 테이불 자체를 삭제한다. (_x_)
3. 뷰는 물리적 기반 테이블로부터만 정의될 수 있고 또 다른 뷰를 기반으로는 정의될 수 없다. (_x_)
4. 뷰는 데이터는 직접 갖지 않지만 검색할 경우, 항상 실시간 정확한 데이터 값을 제공한다. (_o_)
5. GROUP BY절을 적용한 검색 결과를 포함하는 뷰를 통해서는 데이터 변경이 불가능하다. (_o_)
6. 인덱스를 많이 사용한다고 검색 성능이 무조건 좋아지지는 않는다. (_o_)

**14 다음 ( ) 안에 적당한 용어를 채워 완성하시오.**

1. 생성된 학생 테이불의 구조를 확인하는 명령은 ‘(_DESCRIBE_) 학생’이다.
2. 계정에게 부여한 권한은 (REVOKE) 명령문을 통해 다시 철회할 수 있다.
3. 뷰의 장점은 편의성, (보안), 재사용성, 독립성이다.
4. 대부분의 DBMS는 (B-tree) 구조의 인덱스를 지원한다.

**15 뷰에 대한 설명으로 적합한 것을 모두 고르시오 . (

1. 뷰는 CREATE VIEW 명령문을 사용하여 생성한다.
3. 뷰에 SELECT 문을 사용하여 검색이 가능하다.
6. 뷰의 데이터 갱신과 삭제 연산은 항상 허용되는 것이 아니고 제약이 따른다.
7. 뷰를 기반으로 또 다른 새로운 뷰를 만들 수 있다.
8. 뷰는 데이터의 보안 유지에 도움이 된다.

**16 univDB 데이터베이스의 학생 테이블과 수강 테이블을 대상으로 한 과목이라도 평가학점을 'A'를 얻은 학생의 학번과 이름, 학년, 휴대폰번호를 갖는 '장학생' 뷰를 생성하는 SOL 명령문을 작성하십시오.**

CREATE VIEW 장학생 AS
SELECT s.학번, s.이름, s.학년, s.휴대폰번호
FROM 학생 s
JOIN 수강 su ON s.학번 = su.학번
WHERE su.평가학점 = 'A';


**17 인덱스의 장점과 단점을 설명하시오.**

장점

검색 성능 향상
인덱스를 사용하면 데이터베이스의 테이블에서 특정 컬럼의 값을 빠르게 검색할 수 있습니다. 예를 들어, SELECT 문에서 WHERE 조건을 사용할 때 인덱스를 이용하면 검색 시간을 획기적으로 단축할 수 있습니다.

정렬 성능 향상
ORDER BY 또는 GROUP BY 구문에서 인덱스를 활용하면, 데이터를 정렬하는 시간이 크게 줄어듭니다. 인덱스는 이미 정렬된 상태로 저장되기 때문에 추가적인 정렬 작업이 필요 없을 수 있습니다.

중복 데이터 검사 용이
UNIQUE 인덱스를 사용하면, 중복 데이터가 삽입되는 것을 방지할 수 있습니다. 데이터가 삽입될 때마다 중복 여부를 효율적으로 검사할 수 있습니다.

효율적인 조인 처리
여러 테이블을 조인할 때 인덱스를 사용하면 조인 성능이 향상됩니다. 특히, 조인 조건에 사용되는 컬럼에 인덱스가 있으면 데이터 검색 시간이 단축됩니다.

단점

쓰기 성능 저하
인덱스를 사용하면 INSERT, UPDATE, DELETE 작업 시 성능 저하가 발생할 수 있습니다. 왜냐하면 인덱스를 갱신하거나 재구성해야 하기 때문입니다. 데이터가 추가되거나 수정될 때마다 인덱스도 업데이트해야 하기 때문에 쓰기 성능이 떨어질 수 있습니다.

디스크 공간 소비
인덱스는 별도의 디스크 공간을 사용합니다. 특히 인덱스가 많아질수록 디스크 공간을 많이 차지하게 되어, 저장 용량이 증가할 수 있습니다.

복잡한 쿼리에서의 비효율성
인덱스가 많은 경우, 데이터베이스는 쿼리 실행 시 가장 적합한 인덱스를 선택해야 합니다. 그러나 비효율적인 인덱스 사용으로 인해 쿼리 성능이 오히려 나빠질 수도 있습니다.



**18 인덱스를 사용하는 것이 바람직한 경우와 그렇지 않은 경우를 구분하여 설명하시오.**'


바람직한 경우

검색 쿼리가 자주 실행될 때
인덱스는 검색 성능을 크게 향상시킵니다. 특히 자주 조회되는 데이터에 대해 인덱스를 적용하면 검색 시간을 단축할 수 있습니다. 예를 들어, WHERE, JOIN, ORDER BY 등에 자주 사용되는 컬럼에 인덱스를 사용하는 것이 바람직합니다.

대규모 테이블에서 효율적인 조회가 필요할 때
데이터가 많은 테이블에서 특정 컬럼을 자주 조회해야 하는 경우, 인덱스는 검색 성능을 크게 향상시킵니다. 테이블의 크기가 클수록 인덱스의 효과는 더 커집니다.

바람직 하지 않는 경우

인덱스를 과도하게 사용한 경우
너무 많은 인덱스를 추가하면 디스크 공간을 많이 차지하고, 쿼리 성능이 오히려 나빠질 수 있습니다. 각 인덱스는 추가적인 관리 비용과 디스크 공간을 요구하며, 인덱스를 자주 갱신해야 하므로 쓰기 작업에 부하를 줄 수 있습니다.

복잡한 쿼리에서 인덱스가 비효율적으로 사용될 때
일부 복잡한 쿼리에서는 인덱스를 사용하기보다 전체 테이블을 스캔하는 것이 더 효율적일 수 있습니다. 특히 조인이 많은 복잡한 쿼리에서는 인덱스 선택이 잘못되면 성능이 오히려 떨어질 수 있습니다.
